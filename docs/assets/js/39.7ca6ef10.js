(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{177:function(e,t,a){"use strict";a.r(t);var v=a(0),s=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"тестирование-vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#тестирование-vuex","aria-hidden":"true"}},[e._v("#")]),e._v(" Тестирование Vuex")]),e._v(" "),a("p",[e._v("В следующих статьях обсудим как тестировать Vuex.")]),e._v(" "),a("h2",{attrs:{id:"две-стороны-тестирования-vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#две-стороны-тестирования-vuex","aria-hidden":"true"}},[e._v("#")]),e._v(" Две стороны тестирования Vuex")]),e._v(" "),a("p",[e._v("Обычно компоненты взаимодействуют с Vuex так:")]),e._v(" "),a("ol",[a("li",[e._v("вызываем мутацию через commit")]),e._v(" "),a("li",[e._v("запускаем действия через dispatch")]),e._v(" "),a("li",[e._v("обращаемся к хранилищу через "),a("code",[e._v("$store.state")]),e._v(" или геттеры")])]),e._v(" "),a("p",[e._v("В тестах проверяется, что компонент ведет себя правильно при текущем состоянии хранилища Vuex. Они не должны знать о реализациях мутаций, действий, геттеров.")]),e._v(" "),a("p",[e._v("Любая логика хранилища, такая как мутация или использование геттеров, должна тестироваться в изоляции. Для Vuex достаточно просто писать юнит тесты, так как он хранит в себе простые JavaScript функции.")]),e._v(" "),a("p",[e._v("В следующей статье разберем некоторые техники тестирования компонентов с использованием Vuex, убедимся, что их поведение зависит от состояния хранилища. Чуть позже обсудим тестирование Vuex в изоляции.")])])}],!1,null,null,null);t.default=s.exports}}]);